{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YUKTA CHAUDHARI\\\\Desktop\\\\NotesApp\\\\React-Notes-App\\\\src\\\\components\\\\appstate.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\"; //allow for use of Context API in app\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext(); //reducer function - define all state actions\n\nfunction reducer(appstate, action) {\n  //copy of state\n  let appStateCopy = { ...appstate\n  }; //set name of copy action to action\n\n  appStateCopy.action = action; //add new item\n\n  if (action.type === 'ADD_ITEM') {\n    if (appStateCopy.isEditing) {\n      appStateCopy.notes = appStateCopy.notes.map(note => {\n        if (note.id === appStateCopy.currentlyEditing) {\n          note.title = appStateCopy.title;\n          note.description = appStateCopy.description;\n          localStorage.setItem('notes', JSON.stringify(appStateCopy.notes));\n        }\n\n        return note;\n      });\n      appStateCopy.isEditing = false;\n    } else {\n      //to prevent addition of duplicate items, check if index is same, and if they aren't the same, add item\n      const index = appStateCopy.notes.findIndex(el => el.id === action.payload.id);\n\n      if (index === -1) {\n        appStateCopy.notes.unshift(action.payload);\n        localStorage.setItem('notes', JSON.stringify(appStateCopy.notes));\n      }\n    }\n  } //set userLoggedIn to true and userdata to payload(what is keyed/data)\n\n\n  if (action.type === 'LOGIN') {\n    appStateCopy.isUserLoggedIn = true;\n    appStateCopy.userData = action.payload;\n  } //set userLoggedIn to false and userdata back to null in logout\n\n\n  if (action.type === 'LOGOUT') {\n    appStateCopy.isUserLoggedIn = false;\n    appStateCopy.userData = null;\n  } //reset inputs to empty\n\n\n  if (action.type === 'RESET_INPUTS') {\n    appStateCopy.title = '';\n    appStateCopy.description = '';\n  } // update title to edit\n\n\n  if (action.type === 'UPDATE_TITLE') {\n    appStateCopy.title = action.payload;\n  } // update desc to edit\n\n\n  if (action.type === 'UPDATE_DESCRIPTION') {\n    appStateCopy.description = action.payload;\n  } //delete item\n\n\n  if (action.type === 'DELETE_NOTE') {\n    appStateCopy.notes = appStateCopy.notes.filter(note => note.id !== action.payload.id);\n    let items = JSON.parse(localStorage.getItem('notes'));\n    let newItem = items.filter(item => item.id !== action.payload.id);\n    localStorage.setItem('notes', JSON.stringify(newItem));\n  }\n\n  if (action.type === 'EDIT_NOTE') {\n    appStateCopy.title = action.payload.title;\n    appStateCopy.description = action.payload.description;\n    appStateCopy.isEditing = true;\n    appStateCopy.currentlyEditing = action.payload.id;\n  }\n\n  return appStateCopy;\n}\n\nconst getLocalStorage = () => {\n  let listNotes = localStorage.getItem('notes');\n\n  if (listNotes) {\n    return JSON.parse(localStorage.getItem('notes'));\n  } else {\n    return [];\n  }\n}; //initialState object\n\n\nconst initialState = {\n  notes: getLocalStorage(),\n  //notes state stored in array\n  isUserLoggedIn: false,\n  //state to check whether user is logged in\n  userData: null,\n  //check whether user data is null on logout\n  title: '',\n  description: '',\n  isEditing: false,\n  currentlyEditing: ''\n};\n\nfunction AppState({\n  children\n}) {\n  _s();\n\n  //useReducer\n  const [appstate, dispatch] = useReducer(reducer, initialState); //value passed to context for use in other components\n\n  const contextObject = {\n    state: appstate,\n    dispatch: dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextObject,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AppState, \"I8OQ/tlvNbgNmz2BxzNcNJiFf6E=\");\n\n_c = AppState;\nexport default AppState;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppState\");","map":{"version":3,"sources":["C:/Users/YUKTA CHAUDHARI/Desktop/NotesApp/React-Notes-App/src/components/appstate.js"],"names":["createContext","useReducer","AppContext","reducer","appstate","action","appStateCopy","type","isEditing","notes","map","note","id","currentlyEditing","title","description","localStorage","setItem","JSON","stringify","index","findIndex","el","payload","unshift","isUserLoggedIn","userData","filter","items","parse","getItem","newItem","item","getLocalStorage","listNotes","initialState","AppState","children","dispatch","contextObject","state"],"mappings":"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","sourcesContent":["import { createContext, useReducer } from \"react\";\r\n\r\n//allow for use of Context API in app\r\nexport const AppContext = createContext();\r\n\r\n//reducer function - define all state actions\r\nfunction reducer(appstate, action) {\r\n    //copy of state\r\n    let appStateCopy = { ...appstate };\r\n    //set name of copy action to action\r\n    appStateCopy.action = action;\r\n\r\n    //add new item\r\n    if (action.type === 'ADD_ITEM') {\r\n        if (appStateCopy.isEditing) {\r\n            appStateCopy.notes = appStateCopy.notes.map(note => {\r\n                if (note.id === appStateCopy.currentlyEditing) {\r\n\t\t\t\t\tnote.title = appStateCopy.title;\r\n                    note.description = appStateCopy.description;\r\n                    localStorage.setItem('notes', JSON.stringify(appStateCopy.notes))\r\n\t\t\t\t}\r\n                return note;\r\n            })\r\n            appStateCopy.isEditing = false;\r\n        } else {\r\n            //to prevent addition of duplicate items, check if index is same, and if they aren't the same, add item\r\n            const index = appStateCopy.notes.findIndex(el => el.id === action.payload.id);\r\n            if (index === -1) {\r\n                appStateCopy.notes.unshift(action.payload);\r\n                localStorage.setItem('notes', JSON.stringify(appStateCopy.notes))\r\n            }\r\n        }\r\n    }\r\n\r\n    //set userLoggedIn to true and userdata to payload(what is keyed/data)\r\n    if (action.type === 'LOGIN') {\r\n        appStateCopy.isUserLoggedIn = true;\r\n        appStateCopy.userData = action.payload;\r\n    }\r\n\r\n    //set userLoggedIn to false and userdata back to null in logout\r\n    if (action.type === 'LOGOUT') {\r\n        appStateCopy.isUserLoggedIn = false;\r\n        appStateCopy.userData = null;\r\n    }\r\n\r\n    //reset inputs to empty\r\n    if (action.type === 'RESET_INPUTS') {\r\n\t\tappStateCopy.title = '';\r\n\t\tappStateCopy.description = '';\r\n    }\r\n    \r\n    // update title to edit\r\n\tif (action.type === 'UPDATE_TITLE') {\r\n\t\tappStateCopy.title = action.payload;\r\n\t}\r\n\r\n\t// update desc to edit\r\n\tif (action.type === 'UPDATE_DESCRIPTION') {\r\n\t\tappStateCopy.description = action.payload;\r\n\t}\r\n\r\n    //delete item\r\n    if (action.type === 'DELETE_NOTE') {\r\n        appStateCopy.notes = appStateCopy.notes.filter(note => note.id !== action.payload.id);\r\n\r\n        let items = JSON.parse(localStorage.getItem('notes'));\r\n        let newItem = items.filter(item => item.id !== action.payload.id);\r\n        localStorage.setItem('notes', JSON.stringify(newItem))\r\n    }\r\n\r\n    if (action.type === 'EDIT_NOTE') {\r\n        appStateCopy.title = action.payload.title;\r\n\t\tappStateCopy.description = action.payload.description;\r\n\t\tappStateCopy.isEditing = true;\r\n\t\tappStateCopy.currentlyEditing = action.payload.id;\r\n    }\r\n\r\n    return appStateCopy;\r\n}\r\n\r\nconst getLocalStorage = () => {\r\n  let listNotes = localStorage.getItem('notes');\r\n  if (listNotes) {\r\n    return JSON.parse(localStorage.getItem('notes'))\r\n  }\r\n  else {\r\n    return []\r\n  }\r\n}\r\n\r\n//initialState object\r\nconst initialState = {\r\n    notes: getLocalStorage(), //notes state stored in array\r\n    isUserLoggedIn: false, //state to check whether user is logged in\r\n    userData: null, //check whether user data is null on logout\r\n    title: '',\r\n    description: '',\r\n    isEditing: false,\r\n\tcurrentlyEditing: '',\r\n}\r\n\r\nfunction AppState({children}) {\r\n\r\n    //useReducer\r\n    const [appstate, dispatch] = useReducer(reducer, initialState);\r\n\r\n    //value passed to context for use in other components\r\n    const contextObject = {\r\n        state: appstate,\r\n        dispatch: dispatch\r\n    };\r\n    \r\n    return (\r\n        <AppContext.Provider value={contextObject} >\r\n            {children}\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AppState;"]},"metadata":{},"sourceType":"module"}